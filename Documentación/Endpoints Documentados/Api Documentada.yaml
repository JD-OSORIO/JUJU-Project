openapi: 3.0.0
info:
  title: API Documentation
  version: 1.0.0
  description: Documentación de la API para gestión de usuarios y libros.
servers:
  - url: http://localhost:3000
    description: Servidor local

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          description: Nombre de usuario.
        email:
          type: string
          description: Correo electrónico del usuario.
        password:
          type: string
          description: Contraseña del usuario.
        role:
          type: string
          description: Rol del usuario (por defecto 'regular').
      required:
        - username
        - email
        - password

    Book:
      type: object
      properties:
        title:
          type: string
          description: Título del libro.
        author:
          type: string
          description: Autor del libro.
        yearPublished:
          type: number
          description: Año de publicación del libro.
        bookStatus:
          type: boolean
          description: Estado del libro (disponible o reservado).
        owner:
          type: string
          description: ID del usuario propietario del libro.
      required:
        - title
        - author
        - yearPublished
        - owner

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Mensaje de error.

    SuccessResponse:
      type: object
      properties:
        success:
          type: string
          description: Mensaje de éxito.

  responses:
    UnauthorizedError:
      description: No autorizado.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFoundError:
      description: Recurso no encontrado.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ForbiddenError:
      description: Acceso prohibido.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      summary: Registrar un nuevo usuario.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Usuario registrado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Error en la solicitud.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: Iniciar sesión.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Inicio de sesión exitoso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  token:
                    type: string
        '400':
          description: Error en la solicitud.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      summary: Obtener todos los usuarios (solo admin).
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de usuarios.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /users/{id}:
    get:
      summary: Obtener un usuario por ID (solo admin).
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID del usuario.
      responses:
        '200':
          description: Usuario encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    put:
      summary: Actualizar un usuario por ID (solo admin).
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID del usuario.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Usuario actualizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    delete:
      summary: Eliminar un usuario por ID (solo admin).
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID del usuario.
      responses:
        '200':
          description: Usuario eliminado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /books:
    get:
      summary: Obtener todos los libros del usuario autenticado.
      tags:
        - Books
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de libros.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      summary: Crear un nuevo libro.
      tags:
        - Books
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Libro creado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Error en la solicitud.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /books/{bookID}:
    get:
      summary: Obtener un libro por ID.
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: bookID
          in: path
          required: true
          schema:
            type: string
          description: ID del libro.
      responses:
        '200':
          description: Libro encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    put:
      summary: Actualizar un libro por ID.
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: bookID
          in: path
          required: true
          schema:
            type: string
          description: ID del libro.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Libro actualizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    delete:
      summary: Eliminar un libro por ID.
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: bookID
          in: path
          required: true
          schema:
            type: string
          description: ID del libro.
      responses:
        '200':
          description: Libro eliminado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'